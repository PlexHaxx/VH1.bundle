SEARCH_URL	    = 'http://www.vh1.com/search/video/'
BASE_URL = 'http://www.vh1.com'
# SEARCHES DO NOT HAVE PLAYLIST  SO URLS DO NOT END WITH ID=

####################################################################################################
def Search(query):
    oc = ObjectContainer(title1='VH1', title2='Search Results')
    url = SEARCH_URL + '?q=' + String.Quote(query, usePlus = False)
    data = HTML.ElementFromURL(url)
    for item in data.xpath('//ul/li[contains(@class,"mtvn-video ")]'):
        link = item.xpath('./div/a//@href')[0]
        if not link.startswith('http://'):
            link = BASE_URL + link
        image = item.xpath('./div/a/span/img//@src')[0]
        if not image.startswith('http://'):
            image = BASE_URL + image
        try:
            video_title = item.xpath('./div/a/text()')[2].strip()
        except:
            video_title = item.xpath('./div/div/a/text()')[0]
        if not video_title:
            try:
                video_title = item.xpath('./div/a/span/span/text()')[0]
                video_title2 = item.xpath('./div/a/span/em/text()')[0]
                video_title = video_title + ' ' + video_title2
            except:
                video_title = ''
        try:
            date = item.xpath('./p/span/em//text()')[0]
            if date.startswith('Music'):
                date = item.xpath('./p/span/em//text()')[1]
        except:
            date = ''
        if 'hrs ago' in date:
            date = Datetime.Now()
        else:
            date = Datetime.ParseDate(date)

        oc.add(VideoClipObject(url=link, title=video_title, originally_available_at=date, thumb=Resource.ContentsOfURLWithFallback(url=image)))

    return oc
